import pygameimport randomfrom Background import Backgroundfrom Ground import Groundfrom Bird import Birdfrom GameOver import GameOverdef main():    global check_score    pygame.init()    def pipe_create():        pipe_pos = random.choice(pipe_height)        down_pipe = pipe_surface.get_rect(midtop=(700, pipe_pos))        up_pipe = pipe_surface.get_rect(midbottom=(700, pipe_pos - 300))        return down_pipe, up_pipe    def move_pipes(pipes):        for pipe in pipes:            pipe.centerx -= 5        vis_pipes = [pipe for pipe in pipes if pipe.right > -50]        return vis_pipes    def draw_pipes(pipes):        for pipe in pipes:            if pipe.bottom >= 1024:                screen.blit(pipe_surface, pipe)            else:                flip_pipe = pygame.transform.flip(pipe_surface, False, True)                screen.blit(flip_pipe, pipe)    def delete_pipe(pipes):        for pipe in pipes:            if pipe.centerx == -600:                pipes.remove(pipe)        return pipes    def collision(pipes):        global check_score        for pipe in pipes:            if bird.bird_rect.colliderect(pipe):                check_score = True                return False        return True    def pipe_score_check():        global check_score        if pipe_list:            for pipe in pipe_list:                if 98 < pipe.centerx < 102 and check_score:                        game_over.score += 1                        game_over.score_up()                        sound.play()                        check_score = False                if game_over.score > game_over.score_max:                    game_over.score_max = game_over.score                if pipe.centerx < 0:                    check_score = True    clock = pygame.time.Clock()    width = 576    height = 1024    size = (width, height)    screen = pygame.display.set_mode(size)    check_game = False    check_score = True    sound = pygame.mixer.Sound('data/sfx_point.wav')    number_pipe = random.randint(0, 1)    if number_pipe == 0:        pipe_surface = pygame.image.load('data/pipe-green.png')    else:        pipe_surface = pygame.image.load('data/pipe-red.png')    pipe_surface = pygame.transform.scale2x(pipe_surface)    pipe_list = []    pipe_height = [400, 600, 800]    create_pipe = pygame.USEREVENT    pygame.time.set_timer(create_pipe, 1200)    pipe_list = move_pipes(pipe_list)    draw_pipes(pipe_list)    back = Background(screen)    ground = Ground(screen)    bird = Bird(screen)    game_over = GameOver(screen)    done = True    while done:        clock.tick(60)        back.back()        ground.draw_ground()        game_over.update()        for event in pygame.event.get():            if event.type == pygame.QUIT:                done = False            if event.type == create_pipe:                pipe_list.extend(pipe_create())            if event.type == pygame.KEYDOWN:                if event.key == pygame.K_UP:                    check_game = True        if check_game:            game_over.delete_image()            back.back()            ground.draw_ground()            pipe_list = move_pipes(pipe_list)            pipe_list = delete_pipe(pipe_list)            draw_pipes(pipe_list)            bird.update(event)            check_game = collision(pipe_list)            pipe_score_check()            game_over.score_up()        if bird.rect.y >= 880 or collision(pipe_list) is False:            bird.rect.x = 100            bird.rect.y = 100            check_game = False            pipe_list.clear()            game_over.score_up()            game_over.update()            game_over.score_up()            game_over.game_over()        if not check_game:            game_over.score = 0            pipe_list.clear()        pygame.display.flip()        pygame.display.update()if __name__ == "__main__":    main()